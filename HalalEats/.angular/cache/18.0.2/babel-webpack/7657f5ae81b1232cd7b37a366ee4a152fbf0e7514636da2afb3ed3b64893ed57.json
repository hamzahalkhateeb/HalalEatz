{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./dash-board.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./dash-board.component.css?ngResource\";\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Component, Inject, PLATFORM_ID } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { io } from 'socket.io-client';\nlet DashBoardComponent = class DashBoardComponent {\n  constructor(platformId, http, router, route) {\n    this.platformId = platformId;\n    this.http = http;\n    this.router = router;\n    this.route = route;\n    this.longitude = 0;\n    this.latitude = 0;\n    this.cxOrders = [];\n    this.restaurantPackage = [];\n  }\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      window['logout'] = this.logout.bind(this);\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          this.latitude = position.coords.latitude;\n          this.longitude = position.coords.longitude;\n          console.log(`lat: ${this.latitude}, long: ${this.longitude}`);\n          this.getCloseRestaurants();\n          console.log('get closer restaurants caled in front end');\n        });\n      } else {\n        console.log('get restaurants request not sent');\n      }\n    }\n    this.getCloseRestaurants();\n    console.log(\"about to call get cx orders\");\n    this.getCxOrders();\n    const socket = io(\"http://localhost:3000\", {\n      withCredentials: true\n    });\n    // connect to backend >>>>\n    socket.on(\"connect\", () => {\n      socket.emit('customerConnected');\n      console.log(\"cx front end connected to back end\");\n    });\n    //listen for order updates from backend <<<\n    socket.on('orderProgressed', data => {\n      console.log(`order progressed!`);\n      const order = this.cxOrders.find(order => order.id === data.orderId);\n      order.status = data.orderStatus;\n    });\n  }\n  logout(response) {\n    console.log(\"logout attempt initiated!\");\n    this.http.post('http://localhost:3000/logout', {\n      id_token: response.credential\n    }, {\n      withCredentials: true\n    }).subscribe({\n      next: data => {\n        if (data.success) {\n          alert(data.message);\n          this.router.navigateByUrl(data.redirectUrl);\n        } else {\n          console.log(\"unexpected json format! \", data);\n        }\n      },\n      error: error => {\n        console.error('Error: ', error);\n      }\n    });\n  }\n  getCloseRestaurants() {\n    console.log(`get close restauratns function called, it sent the following data: lat: ${this.latitude}, long: ${this.longitude} `);\n    this.http.post('http://localhost:3000/getCloseRestaurants', {\n      long: this.longitude,\n      lat: this.latitude\n    }, {\n      withCredentials: true\n    }).subscribe({\n      next: data => {\n        if (data.success) {\n          alert(data.restaurantPackage);\n          let recievedData = JSON.parse(data.restaurantPackage);\n          this.restaurantPackage = [];\n          for (let i = 0; i < recievedData.length; i++) {\n            const restaurant = recievedData[i];\n            this.restaurantPackage.push({\n              id: restaurant.id,\n              name: restaurant.name,\n              location: restaurant.location,\n              openingHours: restaurant.openingHours,\n              halalRating: restaurant.halalRating,\n              images: restaurant.images,\n              distance: restaurant.DISTANCE\n            });\n          }\n          console.log(this.restaurantPackage);\n        } else {\n          alert(data.message);\n        }\n      },\n      error: error => {\n        console.error('Error: ', error);\n      }\n    });\n  }\n  restaurantPage(restaurantId) {\n    console.log(\"restaurantPage is being clicked___________________________________\");\n    this.router.navigate(['/restaurantPage', restaurantId], {\n      queryParams: {\n        restaurantId: restaurantId\n      }\n    });\n  }\n  getCxOrders() {\n    console.log(\"inside get cx orders!\");\n    this.http.post('http://localhost:3000/getcxOrders', {\n      userId: 'variablePlaceHolder'\n    }, {\n      withCredentials: true\n    }).subscribe({\n      next: data => {\n        if (data.success) {\n          this.cxOrders = data.orders;\n          this.cxOrders.forEach(order => {\n            order.items = JSON.parse(order.items);\n          });\n        } else {\n          alert(data.message);\n        }\n      },\n      error: error => {\n        console.error('error: ', error);\n      }\n    });\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: HttpClient\n  }, {\n    type: Router\n  }, {\n    type: ActivatedRoute\n  }];\n};\nDashBoardComponent = __decorate([Component({\n  selector: 'app-dash-board',\n  standalone: true,\n  imports: [CommonModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], DashBoardComponent);\nexport { DashBoardComponent };","map":{"version":3,"names":["CommonModule","isPlatformBrowser","HttpClient","Component","Inject","PLATFORM_ID","Router","ActivatedRoute","io","DashBoardComponent","constructor","platformId","http","router","route","longitude","latitude","cxOrders","restaurantPackage","ngOnInit","window","logout","bind","navigator","geolocation","getCurrentPosition","position","coords","console","log","getCloseRestaurants","getCxOrders","socket","withCredentials","on","emit","data","order","find","id","orderId","status","orderStatus","response","post","id_token","credential","subscribe","next","success","alert","message","navigateByUrl","redirectUrl","error","long","lat","recievedData","JSON","parse","i","length","restaurant","push","name","location","openingHours","halalRating","images","distance","DISTANCE","restaurantPage","restaurantId","navigate","queryParams","userId","orders","forEach","items","_","args","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\Hamzah Alkhateeb\\Desktop\\Halal Eatz\\HalalEats\\src\\app\\dash-board\\dash-board.component.ts"],"sourcesContent":["import { CommonModule, isPlatformBrowser, NgIf } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Component, Inject, PLATFORM_ID, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ListingFormComponent } from '../listing-form/listing-form.component';\r\nimport {io, Socket} from 'socket.io-client';\r\n\r\n@Component({\r\n  selector: 'app-dash-board',\r\n  standalone: true,\r\n  imports: [ CommonModule],\r\n  templateUrl: './dash-board.component.html',\r\n  styleUrl: './dash-board.component.css'\r\n})\r\nexport class DashBoardComponent implements OnInit {\r\n\r\n  longitude = 0;\r\n  latitude = 0;\r\n  \r\n  \r\n  \r\n  cxOrders: any[] = [];\r\n\r\n  private socket! : Socket;\r\n\r\n  restaurantPackage: Array<{\r\n       id: number;\r\n       name: string;\r\n       location: string;\r\n       openingHours: string;\r\n       halalRating: number;\r\n       images: string;\r\n       distance: number;\r\n\r\n  }> = [];\r\n\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: Object, private http: HttpClient, private router: Router, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    if(isPlatformBrowser(this.platformId)){\r\n      (window as any)['logout'] = this.logout.bind(this);\r\n      \r\n      \r\n\r\n      if(navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n             this.latitude = position.coords.latitude;\r\n             this.longitude = position.coords.longitude;\r\n            console.log(`lat: ${this.latitude}, long: ${this.longitude}`);\r\n            this.getCloseRestaurants();\r\n            console.log('get closer restaurants caled in front end');\r\n          }\r\n        )\r\n      } else {\r\n        console.log('get restaurants request not sent');\r\n      }\r\n\r\n    }\r\n    this.getCloseRestaurants();\r\n    console.log(\"about to call get cx orders\");\r\n    this.getCxOrders();\r\n\r\n    const socket = io(\"http://localhost:3000\", {\r\n      withCredentials: true\r\n    });\r\n\r\n\r\n    // connect to backend >>>>\r\n    socket.on(\"connect\", () =>{\r\n      socket.emit('customerConnected');\r\n      console.log(\"cx front end connected to back end\");\r\n    });\r\n\r\n    //listen for order updates from backend <<<\r\n    socket.on('orderProgressed', (data) => {\r\n      console.log(`order progressed!`);\r\n\r\n      const order = this.cxOrders.find(order => order.id === data.orderId);\r\n\r\n      order.status = data.orderStatus;\r\n      \r\n\r\n    })\r\n\r\n\r\n  }\r\n\r\n  \r\n\r\n\r\n  logout(response: any): void{\r\n    console.log(\"logout attempt initiated!\");\r\n    this.http.post('http://localhost:3000/logout', { id_token: response.credential }, {withCredentials: true})\r\n      .subscribe({\r\n        next: (data: any) => {\r\n          if(data.success){\r\n            alert(data.message);\r\n            this.router.navigateByUrl(data.redirectUrl);\r\n          } else {\r\n            console.log(\"unexpected json format! \", data);\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          console.error('Error: ', error);\r\n        }\r\n});}\r\n\r\n\r\n  getCloseRestaurants(): void{\r\n    console.log(`get close restauratns function called, it sent the following data: lat: ${this.latitude}, long: ${this.longitude} `);\r\n    this.http.post('http://localhost:3000/getCloseRestaurants', { long: this.longitude, lat: this.latitude }, {withCredentials: true})\r\n    .subscribe({\r\n      next: (data: any) => {\r\n        if(data.success){\r\n          alert(data.restaurantPackage);\r\n\r\n          let recievedData = JSON.parse(data.restaurantPackage);\r\n          this.restaurantPackage = [];\r\n\r\n          for (let i = 0; i < recievedData.length; i++){\r\n\r\n            const restaurant = recievedData[i];\r\n\r\n            this.restaurantPackage.push({\r\n              id: restaurant.id ,\r\n              name: restaurant.name ,\r\n              location: restaurant.location ,\r\n              openingHours: restaurant.openingHours ,\r\n              halalRating: restaurant.halalRating ,\r\n              images: restaurant.images ,\r\n              distance: restaurant.DISTANCE \r\n\r\n            })\r\n\r\n          }\r\n\r\n          console.log(this.restaurantPackage);\r\n        } else {\r\n          alert(data.message);\r\n        }\r\n      },\r\n      error: (error: any) => {\r\n        \r\n        console.error('Error: ', error);\r\n      }\r\n    });}\r\n\r\n\r\n  restaurantPage(restaurantId: number, ): void {\r\n\r\n    console.log(\"restaurantPage is being clicked___________________________________\");\r\n    this.router.navigate(['/restaurantPage', restaurantId], {\r\n      queryParams: { restaurantId: restaurantId}\r\n    });\r\n  }\r\n\r\n  getCxOrders(): void{\r\n    console.log(\"inside get cx orders!\");\r\n    this.http.post('http://localhost:3000/getcxOrders', {userId: 'variablePlaceHolder'}, {withCredentials: true})\r\n    .subscribe({\r\n      next: (data: any) => {\r\n        if (data.success){\r\n          this.cxOrders = data.orders;\r\n\r\n          this.cxOrders.forEach(order => {\r\n            order.items = JSON.parse(order.items);\r\n          });\r\n\r\n        } else {\r\n          alert(data.message);\r\n        }\r\n      }, error: (error: any)=>{\r\n        console.error('error: ', error);\r\n      }\r\n    });\r\n\r\n  }\r\n  \r\n  \r\n  }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}