{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./log-in.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./log-in.component.css?ngResource\";\nimport { Component, Inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\nimport { GoogleAuthService } from '../google-auth.service';\nlet LogInComponent = class LogInComponent {\n  constructor(platformId, http, router, gooogleAuthService) {\n    this.platformId = platformId;\n    this.http = http;\n    this.router = router;\n    this.gooogleAuthService = gooogleAuthService;\n  }\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      window['OpenListingForm'] = this.OpenListingForm.bind(this);\n    }\n    this.gooogleAuthService.initilizeGoogleAuth();\n    this.gooogleAuthService.renderGoogleBtn('googlebtn');\n    this.credentialSubscription = this.gooogleAuthService.getCredentialResponse().subscribe(response => {\n      if (response) {\n        console.log('Received credentiuals in the ccomponent:', response);\n        this.sendCredentialsToBackend(response);\n      }\n    });\n  }\n  ngOnDestroy() {\n    if (this.credentialSubscription) {\n      this.credentialSubscription.unsubscribe();\n    }\n  }\n  sendCredentialsToBackend(response) {\n    console.log('sin in attempt initiated: to back end the log in details!');\n    console.log(\"sign in attemp initiated! *****************************************\");\n    const auth_token = response.credential;\n    this.http.post('http://localhost:3000/login', {\n      auth_token\n    }, {\n      withCredentials: true\n    }).subscribe({\n      next: data => {\n        if (data.success) {\n          alert(data.message);\n          this.router.navigateByUrl(data.redirectUrl);\n        } else {\n          console.log(\"unexpected json format! \", data);\n        }\n      },\n      error: error => {\n        console.error('Error: ', error);\n      }\n    });\n  }\n  OpenListingForm(response) {\n    console.log(\"Listing form requested!\");\n    this.router.navigateByUrl(\"/listing-form\");\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: HttpClient\n  }, {\n    type: Router\n  }, {\n    type: GoogleAuthService\n  }];\n};\nLogInComponent = __decorate([Component({\n  selector: 'app-log-in',\n  standalone: true,\n  imports: [CommonModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], LogInComponent);\nexport { LogInComponent };","map":{"version":3,"names":["Component","Inject","PLATFORM_ID","HttpClient","Router","CommonModule","isPlatformBrowser","GoogleAuthService","LogInComponent","constructor","platformId","http","router","gooogleAuthService","ngOnInit","window","OpenListingForm","bind","initilizeGoogleAuth","renderGoogleBtn","credentialSubscription","getCredentialResponse","subscribe","response","console","log","sendCredentialsToBackend","ngOnDestroy","unsubscribe","auth_token","credential","post","withCredentials","next","data","success","alert","message","navigateByUrl","redirectUrl","error","_","args","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\Hamzah Alkhateeb\\Desktop\\Halal Eatz\\HalalEats\\src\\app\\log-in\\log-in.component.ts"],"sourcesContent":["declare var google: any;\r\nimport { Component, OnInit, Inject, PLATFORM_ID, OnDestroy } from '@angular/core';\r\nimport { HttpClient, } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\r\nimport { Subscription } from 'rxjs';\r\nimport { GoogleAuthService } from '../google-auth.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-log-in',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    ],\r\n  templateUrl: './log-in.component.html',\r\n  styleUrl: './log-in.component.css'\r\n})\r\n\r\nexport class LogInComponent implements OnInit {\r\n\r\n  private credentialSubscription!: Subscription;\r\n  constructor(@Inject(PLATFORM_ID) private platformId: Object, private http: HttpClient, private router: Router, private gooogleAuthService: GoogleAuthService) {}\r\n\r\n  ngOnInit(): void {\r\n\r\n    if (isPlatformBrowser(this.platformId)){\r\n      (window as any)['OpenListingForm'] = this.OpenListingForm.bind(this);\r\n    }\r\n\r\n    this.gooogleAuthService.initilizeGoogleAuth();\r\n    this.gooogleAuthService.renderGoogleBtn('googlebtn');\r\n\r\n    this.credentialSubscription = this.gooogleAuthService\r\n     .getCredentialResponse()\r\n     .subscribe((response) => {\r\n      if (response) {\r\n        console.log('Received credentiuals in the ccomponent:', response);\r\n        this.sendCredentialsToBackend(response);\r\n      }\r\n     })\r\n    \r\n\r\n     \r\n\r\n\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void{\r\n    if (this.credentialSubscription){\r\n      this.credentialSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n\r\n  sendCredentialsToBackend(response: any): void {\r\n\r\n    console.log('sin in attempt initiated: to back end the log in details!');\r\n    console.log(\"sign in attemp initiated! *****************************************\");\r\n    \r\n    const auth_token = response.credential;\r\n    this.http.post('http://localhost:3000/login', {auth_token}, {withCredentials: true})\r\n      .subscribe({\r\n        next: (data:any) =>{\r\n          if (data.success){\r\n            alert(data.message);\r\n            \r\n            this.router.navigateByUrl(data.redirectUrl);\r\n          } else {\r\n            console.log(\"unexpected json format! \", data);\r\n          }\r\n          \r\n        },\r\n        error: (error: any) =>{\r\n          console.error('Error: ', error);\r\n        }\r\n      });\r\n  }\r\n\r\n  \r\n\r\n  OpenListingForm(response: any): void{\r\n    console.log(\"Listing form requested!\");\r\n    this.router.navigateByUrl(\"/listing-form\");\r\n    \r\n  }\r\n\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n"],"mappings":";;;AACA,SAASA,SAAS,EAAUC,MAAM,EAAEC,WAAW,QAAmB,eAAe;AACjF,SAASC,UAAU,QAAS,sBAAsB;AAClD,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,YAAY,EAAEC,iBAAiB,QAAQ,iBAAiB;AAEjE,SAASC,iBAAiB,QAAQ,wBAAwB;AAanD,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGzBC,YAAyCC,UAAkB,EAAUC,IAAgB,EAAUC,MAAc,EAAUC,kBAAqC;IAAnH,KAAAH,UAAU,GAAVA,UAAU;IAAkB,KAAAC,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,kBAAkB,GAAlBA,kBAAkB;EAAsB;EAE/JC,QAAQA,CAAA;IAEN,IAAIR,iBAAiB,CAAC,IAAI,CAACI,UAAU,CAAC,EAAC;MACpCK,MAAc,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC;IACtE;IAEA,IAAI,CAACJ,kBAAkB,CAACK,mBAAmB,EAAE;IAC7C,IAAI,CAACL,kBAAkB,CAACM,eAAe,CAAC,WAAW,CAAC;IAEpD,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACP,kBAAkB,CACnDQ,qBAAqB,EAAE,CACvBC,SAAS,CAAEC,QAAQ,IAAI;MACvB,IAAIA,QAAQ,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEF,QAAQ,CAAC;QACjE,IAAI,CAACG,wBAAwB,CAACH,QAAQ,CAAC;MACzC;IACD,CAAC,CAAC;EAOL;EAEAI,WAAWA,CAAA;IACT,IAAI,IAAI,CAACP,sBAAsB,EAAC;MAC9B,IAAI,CAACA,sBAAsB,CAACQ,WAAW,EAAE;IAC3C;EACF;EAGAF,wBAAwBA,CAACH,QAAa;IAEpCC,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;IACxED,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC;IAElF,MAAMI,UAAU,GAAGN,QAAQ,CAACO,UAAU;IACtC,IAAI,CAACnB,IAAI,CAACoB,IAAI,CAAC,6BAA6B,EAAE;MAACF;IAAU,CAAC,EAAE;MAACG,eAAe,EAAE;IAAI,CAAC,CAAC,CACjFV,SAAS,CAAC;MACTW,IAAI,EAAGC,IAAQ,IAAI;QACjB,IAAIA,IAAI,CAACC,OAAO,EAAC;UACfC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;UAEnB,IAAI,CAACzB,MAAM,CAAC0B,aAAa,CAACJ,IAAI,CAACK,WAAW,CAAC;QAC7C,CAAC,MAAM;UACLf,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAES,IAAI,CAAC;QAC/C;MAEF,CAAC;MACDM,KAAK,EAAGA,KAAU,IAAI;QACpBhB,OAAO,CAACgB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MACjC;KACD,CAAC;EACN;EAIAxB,eAAeA,CAACO,QAAa;IAC3BC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,IAAI,CAACb,MAAM,CAAC0B,aAAa,CAAC,eAAe,CAAC;EAE5C;EAAC,QAAAG,CAAA,G;;;YAhEYxC,MAAM;MAAAyC,IAAA,GAACxC,WAAW;IAAA;EAAA,G;;;;;;;;AAHpBM,cAAc,GAAAmC,UAAA,EAV1B3C,SAAS,CAAC;EACT4C,QAAQ,EAAE,YAAY;EACtBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CACPzC,YAAY,CACX;EACH0C,QAAA,EAAAC,oBAAsC;;CAEvC,CAAC,C,EAEWxC,cAAc,CAsE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}