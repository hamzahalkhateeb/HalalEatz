{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { environment } from '../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nlet GoogleAuthService = class GoogleAuthService {\n  constructor() {\n    //declare a variable that holds the credential response from google sign in!\n    this.credentialResponseObject = new BehaviorSubject(null);\n  }\n  //initilize google sign in\n  initilizeGoogleAuth() {\n    google.accounts.id.initialize({\n      client_id: environment.google_Oauth2_key,\n      callback: res => this.handleCredentialResponse(res)\n    });\n  }\n  //render the google button sign in\n  renderGoogleBtn(buttonId) {\n    const btnElement = document.getElementById(buttonId);\n    if (btnElement) {\n      google.accounts.id.renderButton(btnElement, {\n        theme: 'filled_black',\n        size: 'large',\n        shape: 'pill',\n        width: 350\n      });\n    } else {\n      console.log('google btn element not found');\n    }\n  }\n  //assign the response to the empty object we declared in the beginning\n  handleCredentialResponse(response) {\n    console.log('Google credential response: ', response);\n    this.credentialResponseObject.next(response);\n    this.credentialResponseObject.next(null);\n  }\n  getCredentialResponse() {\n    return this.credentialResponseObject.asObservable();\n  }\n  signOut() {\n    google.accounts.id.disableAutoSelect();\n    this.credentialResponseObject.next(null);\n    //idk add more logic here\n    console.log('Logged out');\n  }\n  static #_ = this.ctorParameters = () => [];\n};\nGoogleAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], GoogleAuthService);\nexport { GoogleAuthService };","map":{"version":3,"names":["Injectable","environment","BehaviorSubject","GoogleAuthService","constructor","credentialResponseObject","initilizeGoogleAuth","google","accounts","id","initialize","client_id","google_Oauth2_key","callback","res","handleCredentialResponse","renderGoogleBtn","buttonId","btnElement","document","getElementById","renderButton","theme","size","shape","width","console","log","response","next","getCredentialResponse","asObservable","signOut","disableAutoSelect","_","__decorate","providedIn"],"sources":["C:\\Users\\Hamzah Alkhateeb\\Desktop\\Halal Eatz\\HalalEats\\src\\app\\google-auth.service.ts"],"sourcesContent":["declare var google: any;\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '../environments/environment';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GoogleAuthService {\r\n\r\n  //declare a variable that holds the credential response from google sign in!\r\n  private credentialResponseObject = new BehaviorSubject<any>(null);\r\n\r\n  constructor() { }\r\n\r\n  //initilize google sign in\r\n  initilizeGoogleAuth(): void {\r\n    google.accounts.id.initialize({\r\n          client_id: environment.google_Oauth2_key,\r\n          callback: (res: any)=>this.handleCredentialResponse(res)\r\n    });\r\n  }\r\n\r\n  //render the google button sign in\r\n  renderGoogleBtn(buttonId: string): void {\r\n    const btnElement = document.getElementById(buttonId);\r\n\r\n    if(btnElement){\r\n      google.accounts.id.renderButton( btnElement , {\r\n        theme: 'filled_black',\r\n        size: 'large',\r\n        shape: 'pill',\r\n        width: 350,\r\n      });\r\n    } else {\r\n      console.log('google btn element not found')\r\n    }\r\n  }\r\n\r\n  //assign the response to the empty object we declared in the beginning\r\n  private handleCredentialResponse(response: any){\r\n    console.log('Google credential response: ', response);\r\n    this.credentialResponseObject.next(response);\r\n\r\n    this.credentialResponseObject.next(null);\r\n  }\r\n\r\n  getCredentialResponse(): Observable<any>{\r\n    return this.credentialResponseObject.asObservable();\r\n  }\r\n\r\n\r\n  signOut(): void {\r\n    google.accounts.id.disableAutoSelect();\r\n    this.credentialResponseObject.next(null);\r\n    \r\n    //idk add more logic here\r\n    console.log('Logged out');\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":";AAEA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,eAAe,QAAoB,MAAM;AAK3C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK5BC,YAAA;IAHA;IACQ,KAAAC,wBAAwB,GAAG,IAAIH,eAAe,CAAM,IAAI,CAAC;EAEjD;EAEhB;EACAI,mBAAmBA,CAAA;IACjBC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;MACxBC,SAAS,EAAEV,WAAW,CAACW,iBAAiB;MACxCC,QAAQ,EAAGC,GAAQ,IAAG,IAAI,CAACC,wBAAwB,CAACD,GAAG;KAC5D,CAAC;EACJ;EAEA;EACAE,eAAeA,CAACC,QAAgB;IAC9B,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAACH,QAAQ,CAAC;IAEpD,IAAGC,UAAU,EAAC;MACZX,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACY,YAAY,CAAEH,UAAU,EAAG;QAC5CI,KAAK,EAAE,cAAc;QACrBC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,MAAM;QACbC,KAAK,EAAE;OACR,CAAC;IACJ,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C;EACF;EAEA;EACQZ,wBAAwBA,CAACa,QAAa;IAC5CF,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEC,QAAQ,CAAC;IACrD,IAAI,CAACvB,wBAAwB,CAACwB,IAAI,CAACD,QAAQ,CAAC;IAE5C,IAAI,CAACvB,wBAAwB,CAACwB,IAAI,CAAC,IAAI,CAAC;EAC1C;EAEAC,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACzB,wBAAwB,CAAC0B,YAAY,EAAE;EACrD;EAGAC,OAAOA,CAAA;IACLzB,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACwB,iBAAiB,EAAE;IACtC,IAAI,CAAC5B,wBAAwB,CAACwB,IAAI,CAAC,IAAI,CAAC;IAExC;IACAH,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EAC3B;EAAC,QAAAO,CAAA,G;;AAlDU/B,iBAAiB,GAAAgC,UAAA,EAH7BnC,UAAU,CAAC;EACVoC,UAAU,EAAE;CACb,CAAC,C,EACWjC,iBAAiB,CAqD7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}